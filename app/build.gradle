plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.android.gms.oss-licenses-plugin'
}

def keystorePropertiesFile = rootProject.file("app/signing/keystore.properties")
def localPropertiesFile = rootProject.file("local.properties")

android {
    lintOptions {
        disable "Instantiatable"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        applicationId "com.ku_stacks.ku_ring"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode 29
        versionName "1.3.6"

        def localProperties = new Properties()
        localProperties.load(new FileInputStream(localPropertiesFile))

        buildConfigField "String", "APPS_FLYER_DEV_KEY", localProperties['APPS_FLYER_DEV_KEY']
        buildConfigField "String", "SENDBIRD_APP_ID", localProperties['SENDBIRD_APP_ID']
        buildConfigField "String", "SENDBIRD_API_TOKEN", localProperties['SENDBIRD_API_TOKEN']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            manifestPlaceholders = [
                    appName : "@string/app_name_debug",
                    appIcon : "@drawable/ic_ku_ring_launcher_dev"
            ]
            buildConfigField "String", "API_BASE_URL", "\"https://dev.ku-ring.com/api/\""
            buildConfigField "String", "KURING_CAMPUS_OPEN_CHANNEL_URL", "\"kuring_main_anonymous\""

            applicationIdSuffix '.debug'
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            manifestPlaceholders = [
                    appName : "@string/app_name",
                    appIcon : "@drawable/ic_kuring_launcher"
            ]
            buildConfigField "String", "API_BASE_URL", "\"https://kuring.herokuapp.com/api/\""
            buildConfigField "String", "KURING_CAMPUS_OPEN_CHANNEL_URL", "\"kuring_campus_main_anonymous\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    namespace 'com.ku_stacks.ku_ring'
}

dependencies {
    implementation project(":common:util")
    implementation project(":common:ui_util")
    implementation project(":common:thirdparty")
    implementation project(":data:domain")
    implementation project(":feature:edit_subscription")
    implementation project(":feature:edit_departments")
    implementation project(":feature:feedback")
    implementation project(":feature:my_notification")
    implementation project(":feature:notice_storage")
    implementation project(":feature:notice_detail")
    implementation project(":feature:notion")
    implementation project(":feature:onboarding")
    implementation project(":feature:splash")
    implementation project(":feature:main")

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.android.material
    implementation libs.androidx.constraintlayout

    // dagger hilt
    kapt libs.androidx.hilt.compiler
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    androidTestImplementation  libs.hilt.android.testing
    kaptAndroidTest libs.hilt.compiler
    testImplementation libs.hilt.android.testing
    kaptTest libs.hilt.compiler

    // start up
    implementation libs.androidx.startup.runtime

    // coroutines
    implementation libs.bundles.coroutines
    testImplementation libs.kotlinx.coroutines.test

    // Timber
    implementation libs.timber

    // open source notices
    implementation libs.play.services.oss.licenses

    // tests
    testImplementation libs.bundles.unit.test
    androidTestImplementation libs.bundles.android.test

    // WorkManager
    implementation libs.bundles.androidx.work
    androidTestImplementation libs.androidx.work.testing

    // leak canary
    debugImplementation libs.leakcanary.android

    // google play-auth
    implementation libs.play.services.auth
}

kapt {
    correctErrorTypes true
}
