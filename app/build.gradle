plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.android.gms.oss-licenses-plugin'
}

def keystorePropertiesFile = rootProject.file("app/signing/keystore.properties")
def localPropertiesFile = rootProject.file("local.properties")

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    compileSdk 33

    defaultConfig {
        applicationId "com.ku_stacks.ku_ring"
        minSdk 24
        targetSdk 33
        versionCode 22
        versionName "1.2.10"

        def localProperties = new Properties()
        localProperties.load(new FileInputStream(localPropertiesFile))

        buildConfigField "String", "APPS_FLYER_DEV_KEY", localProperties['APPS_FLYER_DEV_KEY']
        buildConfigField "String", "SENDBIRD_APP_ID", localProperties['SENDBIRD_APP_ID']
        buildConfigField "String", "SENDBIRD_API_TOKEN", localProperties['SENDBIRD_API_TOKEN']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            manifestPlaceholders = [
                    appName : "@string/app_name_debug",
                    appIcon : "@drawable/ic_ku_ring_launcher_dev"
            ]
            buildConfigField "String", "API_BASE_URL", "\"https://dev.ku-ring.com/api/\""
            buildConfigField "String", "KURING_CAMPUS_OPEN_CHANNEL_URL", "\"kuring_main_anonymous\""

            applicationIdSuffix '.debug'
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            manifestPlaceholders = [
                    appName : "@string/app_name",
                    appIcon : "@drawable/ic_kuring_launcher"
            ]
            buildConfigField "String", "API_BASE_URL", "\"https://kuring.herokuapp.com/api/\""
            buildConfigField "String", "KURING_CAMPUS_OPEN_CHANNEL_URL", "\"kuring_campus_main_anonymous\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.compose.compiler.get()
    }
}

dependencies {
    implementation project(":common:util")
    testImplementation testFixtures(project(":common:util"))
    implementation project(":common:ui_util")
    implementation project(":common:preferences")
    implementation project(":common:thirdparty")
    implementation project(":common:work")
    implementation project(":data:domain")
    testImplementation testFixtures(project(":data:domain"))
    implementation project(":data:notice")
    implementation project(":data:push")
    implementation project(":data:user")
    implementation project(":data:staff")
    implementation project(":data:department")
    implementation project(":data:local")
    testImplementation testFixtures(project(":data:local"))
    // SendbirdRepository 삭제되면 :data:remote 의존성 제거하기
    implementation project(":data:remote")
    testImplementation testFixtures(project(":data:remote"))
    implementation project(":feature:edit_subscription")
    implementation project(":feature:feedback")
    implementation project(":feature:my_notification")
    implementation project(":feature:notice_storage")
    implementation project(":feature:notice_detail")

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.android.material
    implementation libs.androidx.constraintlayout

    // dagger hilt
    kapt libs.androidx.hilt.compiler
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    androidTestImplementation  libs.hilt.android.testing
    kaptAndroidTest libs.hilt.compiler
    testImplementation libs.hilt.android.testing
    kaptTest libs.hilt.compiler

    // start up
    implementation libs.androidx.startup.runtime

    // retrofit
    implementation libs.bundles.retrofit

    // okHttp
    implementation libs.okhttp
    implementation libs.okhttp.logging.interceptor
    testImplementation libs.okhttp.mockwebserver

    // coroutines
    implementation libs.bundles.coroutines
    testImplementation libs.kotlinx.coroutines.test

    // rxJava
    implementation libs.bundles.rxjava

    // viewModel
    implementation libs.bundles.viewmodel.ktx

    // Timber
    implementation libs.timber

    // viewPager2
    implementation libs.androidx.viewpager2

    // fragment
    implementation libs.androidx.fragment.ktx
    debugImplementation libs.androidx.fragment.testing

    // firebase
    implementation platform(libs.firebase.bom)
    implementation libs.bundles.firebase

    // open source notices
    implementation libs.play.services.oss.licenses

    // soft keyboard listener
    implementation libs.keyboardvisibilityevent

    // tests
    testImplementation libs.bundles.unit.test
    androidTestImplementation libs.bundles.android.test

    // paging3
    implementation libs.bundles.paging

    // Room
    implementation libs.androidx.room.runtime
    kapt libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.rxjava3
    testImplementation libs.androidx.room.testing

    // Compose
    implementation platform(libs.compose.bom)
    implementation libs.bundles.compose
    implementation libs.bundles.compose.interop

    // WorkManager
    implementation libs.bundles.androidx.work
    androidTestImplementation libs.androidx.work.testing

    // Shimmer effect
    implementation libs.shimmer

    // tag library
    implementation libs.androidtagview

    // HoldableSwipeHandler
    implementation libs.holdableswipehandler

    // leak canary
    debugImplementation libs.leakcanary.android

    // swipeRefreshLayout
    implementation libs.androidx.swiperefreshlayout

    // appsFlyer
    implementation libs.af.android.sdk

    // indicator
    implementation libs.pageindicatorview

    // sendbird sdk
    implementation libs.sendbird.chat

    // google play-auth
    implementation libs.play.services.auth
}

kapt {
    correctErrorTypes true
}
